{"version":3,"sources":["modules/paragraphs_gridstack/es6/widget.es6"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","$","Drupal","settings","loaded","_saveParagraphPosition","jsonData","console","log","_drupalSettings$path","drupalSettings","path","href","baseUrl","pathPrefix","post","JSON","stringify","ajax","url","type","dataType","data","success","behaviors","gridstackField","attach","context","fieldGridstack","options","Array","prototype","forEach","gridHtml","gridstack","cellHeight","verticalMargin","width","gridStack","Object","values","value","field_id","$gridItems","find","jsonFieldData","items","each","key","item","obj","x","y","height","delta","push","once","uniqueKey","this","attr","prependTo","on","event","undefined","el","dataset","text","jQuery","targets","document","querySelectorAll","observer","MutationObserver","mutations","mutation","target","itemBu","config","attributes","childList","characterData","observe","gridFields"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,cAOA,SAAWK,EAAGC,EAAQC,GAGpB,IAAIC,GAAS,EAOb,SAASC,EAAuBC,GAC9BC,QAAQC,IAAI,WAAYF,GACxB,IAAIG,EAAuBC,eAAeC,KAItCC,EAAO,GAHGH,EAAqBI,QAClBJ,EAAqBK,WAEC,cACnCC,EAAO,cAAgBC,KAAKC,UAAUX,GAG1CL,EAAEiB,KAAK,CACLC,IAAKP,EACLQ,KAAM,OACNC,SAAU,OACVC,KAAMP,EACNQ,QAAS,SAAiBD,OAS9BpB,EAAOsB,UAAUC,eAAiB,CAChCC,OAAQ,SAAgBC,EAASxB,GAC/B,IAAIyB,EAAiB3B,EAAE,eACnB4B,EAAU,GAEdC,MAAMC,UAAUC,QAAQnC,KAAK+B,EAAgB,SAAUK,MAEvDhC,EAAE,eAAeiC,UAAU,CACzBC,WAAY,GACZC,eAAgB,EAChBC,MAAO,UAGyB,IAAvBlC,EAASmC,YAClBT,EAAU1B,EAASmC,UAAUnC,UAE7B0B,EAAUU,OAAOC,OAAOX,IAChBG,QAAQ,SAAUS,GACxBxC,EAAE,aAAewC,EAAMC,SAAW,KAAKR,UAAUO,MAMrD,IACIE,EADiB1C,EAAE,eACS2C,KAAK,8CACjCC,EAAgB,CAGpBC,MAAsB,IACtBD,EAAc1C,SAAW0B,EAKpBzB,IACCuC,EAAW7C,SACb6C,EAAWI,KAAK,SAAUC,EAAKC,GAC7B,IAAIC,EAAM,CACRC,EAAGlD,EAAEgD,GAAM3B,KAAK,QAChB8B,EAAGnD,EAAEgD,GAAM3B,KAAK,QAChBe,MAAOpC,EAAEgD,GAAM3B,KAAK,YACpB+B,OAAQpD,EAAEgD,GAAM3B,KAAK,aACrBgC,MAAOrD,EAAEgD,GAAM3B,KAAK,UAEtBuB,EAAcC,MAAMS,KAAKL,KAE3B3C,QAAQC,IAAI,6BACZH,EAAuBwC,IAEzBzC,GAAS,GAoDXH,EAAE,8CAA8CuD,KAAK,aAAaT,KAAK,WACrE,IAAIU,EAAYxD,EAAEyD,MAAMd,KAAK,mBAAmBe,KAAK,OACrDd,EAAcC,MAAMW,GAAa,GACjClD,QAAQC,IAAI,MAAOiD,GAGnBd,EAAWI,KAAK,SAAUC,EAAKC,GAC7B,IAAII,EAASpD,EAAEgD,GAAM3B,KAAK,aAC1B+B,EAAS,WAAsB,GAATA,EAAc,KAEpCpD,EAAEgD,GAAMW,UAAU,+BAAiCP,EAAS,YAG9DpD,EAAEyD,MAAMG,GAAG,cAAe,SAAUC,EAAOhB,GAC5BiB,MAATjB,IACF7C,EAAE6C,GAAOC,KAAK,SAAU5D,GACtB,IAAI+D,EAAM,CACRC,EAAGO,KAAKP,EACRC,EAAGM,KAAKN,EACRf,MAAOqB,KAAKrB,MACZgB,OAAQK,KAAKL,OACbC,MAAOI,KAAKM,GAAG,GAAGC,QAAQX,OAGC,IAAzBT,EAAc/C,QAAgBgD,EAAM3D,GAAG6E,GAAG,GAAGC,QAAQX,QAAUT,EAAc/C,OAC/E+C,EAAcC,MAAMS,KAAKL,IAEzB3C,QAAQC,IAAI,gBAAiBqC,GAC7BA,EAAcC,MAAMW,GAAWC,KAAKM,GAAG,GAAGC,QAAQX,OAAS,GAE3DT,EAAcC,MAAMW,GAAWC,KAAKM,GAAG,GAAGC,QAAQX,OAAOH,EAAIO,KAAKP,EAClEN,EAAcC,MAAMW,GAAWC,KAAKM,GAAG,GAAGC,QAAQX,OAAOF,EAAIM,KAAKN,EAClEP,EAAcC,MAAMW,GAAWC,KAAKM,GAAG,GAAGC,QAAQX,OAAOjB,MAAQqB,KAAKrB,MACtEQ,EAAcC,MAAMW,GAAWC,KAAKM,GAAG,GAAGC,QAAQX,OAAOD,OAASK,KAAKL,QAIzE,IAAIA,EAASK,KAAKL,OAElBA,EAAS,WAAsB,GAATA,EAAc,KADbpD,EAAE6C,EAAM3D,GAAG6E,GAAG,IAAIpB,KAAK,mBAE7BsB,KAAKb,KAExBhD,EAAuBwC,UAlLnC,CAwLGsB,OAAQjE,OAAQQ,gBAGnB,IAAI0D,EAAUC,SAASC,iBAAiB,8CAIpCC,EAAW,IAAIC,iBAAiB,SAAUC,GAC5CA,EAAUzC,QAAQ,SAAU0C,GACTA,EAASC,OAAOL,iBAAiB,8CACvCtC,QAAQ,SAAU4C,GAC3BrE,QAAQC,IAAIoE,EAAOX,eAMrBY,EAAS,CAAEC,YAAY,EAAMC,WAAW,EAAMC,eAAe,GAGjEZ,EAAQpC,QAAQ,SAAUC,GACxBsC,EAASU,QAAQhD,EAAU4C,KAG7B,IAAIK,EAAab,SAASC,iBAAiB,8CAC3C/D,QAAQC,IAAI0E,IAEV,KAAK,GAAG,CAAC","file":"../widget.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\n/**\n * @file\n * Provides GridStack loaders.\n */\n\n(function ($, Drupal, settings) {\n  'use strict';\n\n  var loaded = false;\n\n  /**\n   * Helper function.\n   *\n   * Add data to json field and send to drupal callback.\n   */\n  function _saveParagraphPosition(jsonData) {\n    console.log('jsonData', jsonData);\n    var _drupalSettings$path = drupalSettings.path,\n        baseUrl = _drupalSettings$path.baseUrl,\n        pathPrefix = _drupalSettings$path.pathPrefix;\n\n    var href = '' + baseUrl + pathPrefix + 'grid_update';\n    var post = \"grid_items=\" + JSON.stringify(jsonData);\n\n    // Send data to drupal side.\n    $.ajax({\n      url: href,\n      type: \"POST\",\n      dataType: 'json',\n      data: post,\n      success: function success(data) {}\n    });\n  }\n\n  function _gatherInfo() {}\n\n  /**\n   * Implements grid and backbone collections on node edit page.\n   */\n  Drupal.behaviors.gridstackField = {\n    attach: function attach(context, settings) {\n      var fieldGridstack = $('.grid-stack');\n      var options = {};\n\n      Array.prototype.forEach.call(fieldGridstack, function (gridHtml) {});\n\n      $('.grid-stack').gridstack({\n        cellHeight: 50,\n        verticalMargin: 0,\n        width: 12\n      });\n\n      if (typeof settings.gridStack !== 'undefined') {\n        options = settings.gridStack.settings;\n        // fieldGridstack.gridstack(options);\n        options = Object.values(options);\n        options.forEach(function (value) {\n          $('div[fid = ' + value.field_id + ']').gridstack(value);\n        });\n        // $('div[fid = ' + options.field_id + ']').gridstack(options);\n      }\n\n      // Fill in JSON field with parameters from grid items.\n      var $gridContainer = $('.grid-stack');\n      var $gridItems = $gridContainer.find('.grid-stack-item.ui-draggable.ui-resizable');\n      var jsonFieldData = {};\n      // jsonFieldData[fid] = {};\n\n      jsonFieldData.items = [];\n      jsonFieldData.settings = options;\n      // jsonFieldData.fid = fid;\n\n      // Warm up cache on page load and add new items.\n      // @TODO need rewrite loaded logic to document ready.\n      if (!loaded) {\n        if ($gridItems.length) {\n          $gridItems.each(function (key, item) {\n            var obj = {\n              x: $(item).data('gs-x'),\n              y: $(item).data('gs-y'),\n              width: $(item).data('gs-width'),\n              height: $(item).data('gs-height'),\n              delta: $(item).data('delta')\n            };\n            jsonFieldData.items.push(obj);\n          });\n          console.log('KUUUUUUUUUUUUURWA WARMING');\n          _saveParagraphPosition(jsonFieldData);\n        }\n        loaded = true;\n      }\n\n      // $('.field--widget-paragraphs-gridstack-widget').once('save-item', function () {\n      //   // Add custom element with value of item height.\n      //   console.log('GGGGGGGGGGGGGGGGGGGGGG');\n      //   console.log('$gridItems', $gridItems);\n      //   $gridItems.each(function (key, item) {\n      //     let height = $(item).data('gs-height');\n      //     height = 'Height: ' + (height * 50) + 'px';\n      //     // $(item).find('.grid-stack-item-content').prepend('<div class=\"height-counter\">' + height + '</div>');\n      //     $(item).prependTo('<div class=\"height-counter\">' + height + '</div>');\n      //   });\n      //\n      //   $(this).on('change', function(event, items) {\n      //     console.log('CHANGE KURWA');\n      //     if(items != undefined) {\n      //       console.log('IN IF KURWA');\n      //\n      //\n      //       $(items).each(function(i) {\n      //         console.log('CE THIS KURWA', this);\n      //         console.log('CE THIS KURWA2', this.el[0]);\n      //         var obj = {\n      //           x: this.x,\n      //           y: this.y,\n      //           width: this.width,\n      //           height: this.height,\n      //           delta: this.el[0].dataset.delta\n      //         };\n      //\n      //         if ((jsonFieldData.length === 0) || (items[i].el[0].dataset.delta === jsonFieldData.length)) {\n      //           jsonFieldData.items.push(obj);\n      //         }\n      //         else {\n      //           jsonFieldData.items[this.el[0].dataset.delta].x = this.x;\n      //           jsonFieldData.items[this.el[0].dataset.delta].y = this.y;\n      //           jsonFieldData.items[this.el[0].dataset.delta].width = this.width;\n      //           jsonFieldData.items[this.el[0].dataset.delta].height = this.height;\n      //         }\n      //\n      //         // Update custom element with value of item height.\n      //         var height = this.height;\n      //         var $heightContainer = $(items[i].el[0]).find('.height-counter');\n      //         height = 'Height: ' + (height * 50) + 'px';\n      //         $heightContainer.text(height);\n      //       });\n      //       _saveParagraphPosition(jsonFieldData);\n      //     }\n      //   });\n      // });\n\n      $('.field--widget-paragraphs-gridstack-widget').once('save-item').each(function () {\n        var uniqueKey = $(this).find('.form-item-grid').attr('fid');\n        jsonFieldData.items[uniqueKey] = [];\n        console.log('KEY', uniqueKey);\n\n        // Add custom element with value of item height.\n        $gridItems.each(function (key, item) {\n          var height = $(item).data('gs-height');\n          height = 'Height: ' + height * 50 + 'px';\n          // $(item).find('.grid-stack-item-content').prepend('<div class=\"height-counter\">' + height + '</div>');\n          $(item).prependTo('<div class=\"height-counter\">' + height + '</div>');\n        });\n\n        $(this).on('change.grid', function (event, items) {\n          if (items != undefined) {\n            $(items).each(function (i) {\n              var obj = {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height,\n                delta: this.el[0].dataset.delta\n              };\n\n              if (jsonFieldData.length === 0 || items[i].el[0].dataset.delta === jsonFieldData.length) {\n                jsonFieldData.items.push(obj);\n              } else {\n                console.log('jsonFieldData', jsonFieldData);\n                jsonFieldData.items[uniqueKey][this.el[0].dataset.delta] = {}; //@TODO ?????\n\n                jsonFieldData.items[uniqueKey][this.el[0].dataset.delta].x = this.x;\n                jsonFieldData.items[uniqueKey][this.el[0].dataset.delta].y = this.y;\n                jsonFieldData.items[uniqueKey][this.el[0].dataset.delta].width = this.width;\n                jsonFieldData.items[uniqueKey][this.el[0].dataset.delta].height = this.height;\n              }\n\n              // Update custom element with value of item height.\n              var height = this.height;\n              var $heightContainer = $(items[i].el[0]).find('.height-counter');\n              height = 'Height: ' + height * 50 + 'px';\n              $heightContainer.text(height);\n            });\n            _saveParagraphPosition(jsonFieldData);\n          }\n        });\n      });\n    }\n  };\n})(jQuery, Drupal, drupalSettings);\n\n// выбираем целевой элемент\nvar targets = document.querySelectorAll('.field--widget-paragraphs-gridstack-widget');\n// console.log('target', target);\n\n// создаём экземпляр MutationObserver\nvar observer = new MutationObserver(function (mutations) {\n  mutations.forEach(function (mutation) {\n    var gridItemsR = mutation.target.querySelectorAll('.grid-stack-item.ui-draggable.ui-resizable');\n    gridItemsR.forEach(function (itemBu) {\n      console.log(itemBu.dataset);\n    });\n  });\n});\n\n// конфигурация нашего observer:\nvar config = { attributes: true, childList: true, characterData: true };\n\n// передаём в качестве аргументов целевой элемент и его конфигурацию\ntargets.forEach(function (gridHtml) {\n  observer.observe(gridHtml, config);\n});\n\nvar gridFields = document.querySelectorAll('.field--widget-paragraphs-gridstack-widget');\nconsole.log(gridFields);\n\n},{}]},{},[1]);\n"]}